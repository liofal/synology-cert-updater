{{- if and .Values.cronJob.schedule .Values.secrets.certificate .Values.commonJobSettings.domainPattern }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "synology-cert-updater.fullname" . }}-cronjob
  labels:
    {{- include "synology-cert-updater.labels" . | nindent 4 }}
    app.kubernetes.io/component: cronjob
spec:
  schedule: {{ .Values.cronJob.schedule | quote }}
  {{- if .Values.cronJob.startingDeadlineSeconds }}
  startingDeadlineSeconds: {{ .Values.cronJob.startingDeadlineSeconds }}
  {{- end }}
  concurrencyPolicy: {{ .Values.cronJob.concurrencyPolicy }}
  successfulJobsHistoryLimit: {{ .Values.cronJob.successfulJobsHistoryLimit }}
  failedJobsHistoryLimit: {{ .Values.cronJob.failedJobsHistoryLimit }}
  jobTemplate:
    spec:
      {{- if .Values.commonJobSettings.ttlSecondsAfterFinished }}
      ttlSecondsAfterFinished: {{ .Values.commonJobSettings.ttlSecondsAfterFinished }}
      {{- end }}
      backoffLimit: {{ .Values.commonJobSettings.backoffLimit }}
      template:
        metadata:
          labels:
            {{- include "synology-cert-updater.selectorLabels" . | nindent 12 }}
            app.kubernetes.io/component: cronjob-pod
        spec:
          # Pods will run with the default ServiceAccount in the namespace
          restartPolicy: {{ .Values.commonJobSettings.restartPolicy }}
          containers:
            - name: {{ .Chart.Name }}
              image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
              imagePullPolicy: {{ .Values.image.pullPolicy }}
              env:
                - name: SYNOLOGY_HOST
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Values.secrets.existingCredentialsSecretName | default (printf "%s-synology-credentials" .Release.Name) }}
                      key: host
                - name: SYNOLOGY_USER
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Values.secrets.existingCredentialsSecretName | default (printf "%s-synology-credentials" .Release.Name) }}
                      key: username
                - name: SYNOLOGY_PASS
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Values.secrets.existingCredentialsSecretName | default (printf "%s-synology-credentials" .Release.Name) }}
                      key: password
                - name: CERT_PATH
                  value: /etc/tls/tls.crt
                - name: KEY_PATH
                  value: /etc/tls/tls.key
                - name: DOMAIN_PATTERN
                  value: {{ .Values.commonJobSettings.domainPattern | quote }}
                {{- if .Values.cronJob.dryRun }}
                - name: DRY_RUN
                  value: "true"
                {{- end }}
              volumeMounts:
                - name: tls-secret-volume
                  mountPath: /etc/tls
                  readOnly: true
              resources:
                {{- toYaml .Values.resources | nindent 16 }}
          volumes:
            - name: tls-secret-volume
              secret:
                secretName: {{ .Values.secrets.certificate }}
          {{- with .Values.nodeSelector }}
          nodeSelector:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.affinity }}
          affinity:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.tolerations }}
          tolerations:
            {{- toYaml . | nindent 12 }}
          {{- end }}
{{- end }}
